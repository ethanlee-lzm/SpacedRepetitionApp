(() => { "use strict"; class t { constructor(t, e = "No date") { this.name = t, this.dueDate = e } setName(t) { this.name = t } getName() { return this.name } setDate(t) { this.dueDate = t } getDate() { return this.dueDate } } class e { constructor(t) { this.name = t, this.tasks = [] } setName(t) { this.name = t } getName() { return this.name } addTask(t) { this.tasks.indexOf(t) > 0 || this.tasks.push(t) } deleteTask(t) { const e = this.tasks.find((e => e.name === t)); this.tasks.splice(this.tasks.indexOf(e), 1) } getTask(e) { return Object.assign(new t, this.tasks.find((t => t.name = e))) } getTasks() { return this.tasks } contains(t) { return this.tasks.some((e => e.name === t)) } } class s { constructor() { this.projects = [] } addProject(t) { this.projects.indexOf(t) > 0 || this.projects.push(t) } deleteProject(t) { const e = this.projects.find((e => e.name === t)); this.projects.splice(this.projects.indexOf(e), 1) } getProject(t) { return Object.assign(new e, this.projects.find((e => e.name === t))) } getProjects() { return this.projects } contains(t) { return this.projects.some((e => e.name === t)) } } class a { static saveTodoList(t) { localStorage.setItem("todoList", JSON.stringify(t)) } static getTodoList() { return Object.assign(new s, JSON.parse(localStorage.getItem("todoList"))) } static addProject(t) { let e = new s; null !== a.getTodoList() && (e = Object.assign(new s, a.getTodoList())), e.addProject(t), a.saveTodoList(e) } static deleteProject(t) { const e = Object.assign(new s, a.getTodoList()); e.deleteProject(t), a.saveTodoList(e) } static addTask(t, e) { const n = Object.assign(new s, a.getTodoList()); n.getProject(t).addTask(e), a.saveTodoList(n) } static deleteTask(t, e) { const n = Object.assign(new s, a.getTodoList()); n.getProject(t).deleteTask(e), a.saveTodoList(n) } } class n { static load() { n.loadProjects(), n.initProjectButtons() } static loadProjects() { a.getTodoList().getProjects().forEach((t => this.createProject(t.name))) } static initProjectButtons() { const t = document.getElementById("button-inbox-projects"), e = document.getElementById("button-today-projects"), s = document.getElementById("button-week-projects"), a = document.getElementById("button-add-project"), o = document.getElementById("button-add-project-popup"), d = document.getElementById("button-cancel-project-popup"), c = document.querySelectorAll("[data-project-button]"); t.addEventListener("click", n.openInboxTasks), e.addEventListener("click", n.openTodayTasks), s.addEventListener("click", n.openWeekTasks), a.addEventListener("click", n.openAddProjectPopup), o.addEventListener("click", n.addProject), d.addEventListener("click", n.closeAddProjectPopup), c.forEach((t => t.addEventListener("click", n.handleProjectButton))) } static openInboxTasks() { } static openTodayTasks() { } static openWeekTasks() { } static openAddProjectPopup() { document.getElementById("add-project-popup").classList.add("active"), this.classList.add("active") } static closeAddProjectPopup() { document.getElementById("add-project-popup").classList.remove("active"), document.getElementById("input-add-project-popup").value = "", document.getElementById("button-add-project").classList.remove("active") } static addProject() { const t = document.getElementById("input-add-project-popup").value; "" === t || a.getTodoList().contains(t) || (n.createProject(t), a.addProject(new e(t))), n.closeAddProjectPopup() } static createProject(t) { document.getElementById("user-projects").innerHTML += ` \n      <button class="button-project" data-project-button>\n        <div class="left-project-panel">\n          <i class="fas fa-tasks"></i>\n          <span>${t}</span>\n        </div>\n        <div class="right-project-panel">\n          <i class="fas fa-times"></i>\n        </div>\n      </button>`, n.initProjectButtons() } static handleProjectButton(t) { const e = this.children[0].children[1].textContent; t.target.classList.contains("fas") ? n.deleteProject(e) : n.openProject(e) } static openProject(t) { document.getElementById("project-preview").innerHTML = `\n    <h1>${t}</h1>\n      <div class="tasks-list" id="tasks-list"></div>\n      <button class="button-add-task" id="button-add-task">\n        <i class="fas fa-plus"></i>\n        Add Task\n      </button>\n      <div class="add-task-popup" id="add-task-popup">\n        <input\n          class="input-add-task-popup"\n          id="input-add-task-popup"\n          type="text"\n        />\n        <div class="add-task-popup-buttons">\n          <button class="button-add-task-popup" id="button-add-task-popup">\n            Add\n          </button>\n          <button\n            class="button-cancel-task-popup"\n            id="button-cancel-task-popup"\n          >\n            Cancel\n          </button>\n        </div>\n      </div>`, n.renderTasks(t), n.initAddTaskButtons() } static deleteProject(t) { a.deleteProject(t), n.loadProjects(), n.clear() } static clear() { document.getElementById("user-projects").textContent = "", document.getElementById("project-preview").textContent = "" } static initAddTaskButtons() { const t = document.getElementById("button-add-task"), e = document.getElementById("button-add-task-popup"), s = document.getElementById("button-cancel-task-popup"), a = document.querySelectorAll("[data-task-button]"); t.addEventListener("click", n.openAddTaskPopup), e.addEventListener("click", n.addTask), s.addEventListener("click", n.closeAddTaskPopup), a.forEach((t => t.addEventListener("click", n.handleTaskButton))) } static openAddTaskPopup() { document.getElementById("add-task-popup").classList.add("active"), this.classList.add("active") } static closeAddTaskPopup() { document.getElementById("add-task-popup").classList.remove("active"), document.getElementById("input-add-task-popup").value = "", document.getElementById("button-add-task").classList.remove("active") } static addTask() { const e = document.getElementById("input-add-task-popup").value, s = document.getElementById("project-preview").children[0].textContent; "" === e || a.getTodoList().getProject(s).contains(e) || (n.createTask(e, "No date"), a.addTask(s, new t(e))), n.closeAddTaskPopup() } static createTask(t, e) { document.getElementById("tasks-list").innerHTML += `\n      <button class="button-task">\n        <div class="left-task-panel">\n          <i class="far fa-circle"></i>\n          <p class="task-content">${t}</p>\n        </div>\n        <div class="right-task-panel">\n          <div class="due-date">${e}</div>\n          <i class="fas fa-times"></i>\n        </div>\n      </button>` } static renderTasks(t) { a.getTodoList().getProject(t).getTasks().forEach((t => n.createTask(t.name, t.dueDate))) } static handleTaskButton() { } static setTaskCompleted() { } static deleteTask() { } static renameTask() { } static setTaskDate() { } } document.addEventListener("DOMContentLoaded", n.load()) })();